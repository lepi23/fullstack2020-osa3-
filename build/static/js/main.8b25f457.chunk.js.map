{"version":3,"sources":["components/Person.js","components/RenderPeople.js","components/PersonForm.js","components/FilterForm.js","services/persons.js","components/SuccessNotification.js","components/ErrorNotification.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","handleClick","name","number","onClick","id","RenderPeople","numbers","map","key","PersonForm","handleNameChange","handleNumberChange","addPerson","newNumber","newName","onSubmit","value","onChange","type","FilterForm","filterWord","handleFilterChange","baseUrl","getAll","a","request","axios","get","response","data","create","newObject","post","update","put","remove","delete","SuccessNotification","message","className","ErrorNotification","App","useState","persons","setPersons","useEffect","personService","then","initialPersons","setNewName","setNewNumber","setFilterWord","showAll","successMessage","setSuccessMessage","errorMessage","setErrorMessage","handleSuccessMessage","setTimeout","handleErrorMessage","personsToShow","filter","toLowerCase","includes","event","preventDefault","target","indexOf","window","confirm","find","n","changedPerson","returnedPerson","catch","error","console","log","personObject","concat","RName","RId","newPersons","toString","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b25f457.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = ( { person, handleClick } ) =>\r\n{\r\nreturn(\r\n    <tr>\r\n        <td>\r\n            {person.name}\r\n        </td>\r\n        <td>\r\n            {person.number}\r\n        </td>\r\n        <td>\r\n            <button onClick = {handleClick} name = {person.name} id = {person.id}>\r\n                delete\r\n            </button>\r\n        </td>\r\n    </tr>\r\n    )   \r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\nconst RenderPeople = ( { numbers, handleClick } ) =>{\r\n  return(\r\n    <tbody>\r\n      {numbers.map(person =>\r\n      <Person  person = {person} key = {person.id} handleClick = {handleClick}/>)\r\n      }      \r\n    </tbody>\r\n  )\r\n}\r\nexport default RenderPeople","import React from 'react'\r\n\r\nconst PersonForm = ({handleNameChange, handleNumberChange, addPerson, newNumber, newName}) => {\r\n    \r\n    return(\r\n        <form onSubmit={addPerson}>\r\n            <div>\r\n                name: <input\r\n                value={newName}\r\n                onChange={handleNameChange}\r\n                />\r\n            </div>\r\n            <div>\r\n                number: <input \r\n                value={newNumber}\r\n                onChange={handleNumberChange}/>\r\n            </div>\r\n            <div>\r\n                <button \r\n                    type=\"submit\">add\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst FilterForm = ({filterWord, handleFilterChange}) => {\r\n\r\n    return(\r\n        <form>\r\n            <div>\r\n                filter shown with: <input\r\n                value={filterWord}\r\n                onChange={handleFilterChange}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default FilterForm","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = async () => {\r\n    const request = axios.get(baseUrl)\r\n    const response = await request\r\n    return response.data\r\n  }\r\n  \r\n  const create = async newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    const response = await request\r\n      return response.data\r\n  }\r\n  \r\n  const update = async (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    const response = await request\r\n      return response.data\r\n  }\r\n\r\n  const remove = async (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    const response = await request\r\n      return response.data\r\n  }\r\n\r\n  export default { \r\n    getAll, \r\n    create, \r\n    update,\r\n    remove\r\n  }","import React from 'react'\r\n//onnistuneen operaation ilmoitus komponentti\r\nconst SuccessNotification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"success\">\r\n        {message}\r\n      </div>\r\n      \r\n    )\r\n  }\r\n  \r\n  export default SuccessNotification\r\n  ","import React from 'react'\r\n//virheilmoitus komponentti\r\nconst ErrorNotification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n      \r\n    )\r\n  }\r\n  \r\n  export default ErrorNotification\r\n  ","import React, { useState, useEffect } from 'react'\nimport RenderPeople from './components/RenderPeople'\nimport PersonForm from './components/PersonForm'\nimport FilterForm from './components/FilterForm'\nimport personService from './services/persons'\nimport SuccessNotification from './components/SuccessNotification'\nimport ErrorNotification from './components/ErrorNotification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  \n  useEffect(() => {\n      personService\n        .getAll()\n          .then(initialPersons => {\n            setPersons(initialPersons)\n          })\n  }, [])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterWord, setFilterWord] = useState('')\n  const [showAll, setShowAll] = useState(false)\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  // HenkilÃ¶n lisÃ¤ys puhelinluetteloon\n  const addPerson = (event) => {\n    event.preventDefault()\n    const names = persons.map((person) => person.name)\n    if (names.indexOf(newName) >= 0)\n    {\n      if (window.confirm(`${newName} is already on the phonebook. Do you want to add a new number?`)) { \n          const person = persons.find(n => n.name === newName)\n          const changedPerson = { ...person, number : newNumber }         \n        personService\n          .update(changedPerson.id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== changedPerson.id ? person : returnedPerson))\n            handleSuccessMessage(`${newName} succesfully changed`)\n          })\n          .catch(error =>{\n            console.log(error)\n            handleErrorMessage(`Information of ${newName} has already been removed from the server`)\n          })         \n      }\n      else{\n        handleSuccessMessage(`${newName} was not changed`)\n      }\n          \n    }\n    else{\n\n      const personObject = { \n      name : newName,\n      number : newNumber\n      }\n      personService\n        .create(personObject)\n          .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          handleSuccessMessage(`${newName} was added to the book`)\n          })\n          .catch(error => {\n            handleErrorMessage(`person '${personObject.name}' was not added succesfully\n              ${error}`)\n          })\n    }\n    setNewName('')\n    setNewNumber('') \n  }\n  //henkilÃ¶n poisto luettelosta\n  const removePerson = (event) => {\n    event.preventDefault()\n    const RName = event.target.name\n    const RId = event.target.id\n    \n    if (window.confirm(`Delete ${RName}?`)) { \n      personService.remove(RId)\n      const newPersons = persons.filter(person => person.id.toString() !== RId)\n      setPersons(newPersons) } \n      handleSuccessMessage(`${RName} succesfully removed`)\n      \n  }\n  const handleSuccessMessage = (message) =>{\n    setSuccessMessage(message)\n          setTimeout(() => {\n            setSuccessMessage(null)\n          }, 1000)\n  }\n  const handleErrorMessage = (message) =>{\n    setErrorMessage(message)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 4000)\n  }\n  \n  // nimen muutoksen tapahtumakÃ¤sittelijÃ¤\n  const handleNameChange = (event) => {\n    event.preventDefault()\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    event.preventDefault()\n    setNewNumber(event.target.value)\n  }\n  const handleFilterChange = (event ) => {\n    event.preventDefault()\n    setFilterWord(event.target.value)\n  }\n\nconst personsToShow = showAll\n  ? persons\n  : persons.filter(person => person.name.toLowerCase().includes(filterWord.toLowerCase()))\n\n\n  return (\n    <div>\n      <SuccessNotification message = {successMessage}/>\n      <ErrorNotification message = {errorMessage}/>\n      <h2>Phonebook</h2>\n      <FilterForm filterWord = {filterWord} handleFilterChange = {handleFilterChange}/>\n      <h2>Add a new</h2>\n      <PersonForm handleNameChange ={handleNameChange} handleNumberChange ={handleNumberChange} addPerson = {addPerson} newName = {newName} newNumber = {newNumber} />\n      <h2>Numbers</h2>\n      <table>\n        <RenderPeople numbers={personsToShow} handleClick = {removePerson} />\n      </table> \n    </div>\n    \n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}